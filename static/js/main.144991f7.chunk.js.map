{"version":3,"sources":["actions/client.js","components/API.js","components/Page.js","actions/reposActions.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","Pages","dispatch","useDispatch","useState","user","setUser","repos","useSelector","state","url","useEffect","getState","type","payload","fetchNewRepos","className","onsubmit","placeholder","onClick","inputValue","document","querySelector","value","sort","first","second","stargazers_count","map","repo","href","html_url","name","description","id","App","Page","Boolean","location","hostname","match","allReducers","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yPAAO,SAAeA,EAAtB,kC,4CAAO,WAAsBC,GAAtB,uCAAAC,EAAA,8FAA4D,GAA1BC,EAAlC,EAAkCA,KAASC,EAA3C,wBACGC,EAAU,CAAE,eAAgB,oBAE5BC,EAHH,yBAIDC,OAAQ,OACLH,GALF,IAMDC,QAAQ,2BACHA,GACAD,EAAaC,WAIhBF,IACFG,EAAOH,KAAOK,KAAKC,UAAUN,IAb5B,kBAkBsBO,OAAOC,MAAMV,EAAUK,GAlB7C,cAkBKM,EAlBL,iBAmBYA,EAASC,OAnBrB,WAmBDC,EAnBC,QAoBGF,EAASG,GApBZ,0CAqBQD,GArBR,cAuBK,IAAIE,MAAMJ,EAASK,YAvBxB,2DAyBMC,QAAQC,OAAO,KAAIC,QAAU,KAAIA,QAAUN,IAzBjD,2D,sBA6BLd,EAAOqB,IAAM,SAAUpB,GAA8B,IAApBG,EAAmB,uDAAJ,GAC9C,OAAOJ,EAAOC,EAAD,YAAC,eAAeG,GAAhB,IAA8BG,OAAQ,UC9BhD,I,OC+CQe,EA1CD,WACV,IAAMC,EAAWC,cACjB,EAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SACnCG,EAAG,UDTO,+BCSP,YAAaL,EAAb,UAaT,OANAM,qBAAU,WACI,OAAPN,GACCH,ECLL,SAAuBQ,GAC5B,8CAAO,WAA2BR,EAAUU,GAArC,eAAA/B,EAAA,sEACgBF,EAAOqB,IAAIU,GAD3B,OACDnB,EADC,OAEPW,EAAS,CAAEW,KAAM,oBAAqBC,QAASvB,IAFxC,2CAAP,wDDImBwB,CAAcL,MAE7B,CAACL,IAGC,sBAAKW,UAAU,yCAAf,UACI,oBAAIA,UAAU,8CAAd,+CACA,uBAAMA,UAAU,kBAAkBC,SAAS,gBAA3C,UACI,uBAAOD,UAAU,kFAAkFH,KAAK,OAAOK,YAAY,oCAC3H,wBAAQF,UAAU,2MAA2MG,QAhBlN,WACnB,IAAIC,EAAaC,SAASC,cAAc,UAAUC,MAClDjB,EAAQc,IAcsPP,KAAK,SAA3P,uBAEJ,qBAAKG,UAAU,0BAAf,SACKT,GAAOA,EACPiB,MAAK,SAASC,EAAOC,GAClB,OAAOA,EAAOC,iBAAmBF,EAAME,oBAE1CC,KAAI,SAAAC,GAAI,OACT,qBAAmBb,UAAU,+CAA7B,SACI,oBAAGc,KAAMD,EAAKE,SAAd,UACI,oBAAIf,UAAU,mCAAd,SAAiD,mBAAGc,KAAMD,EAAKE,SAAd,SAAyBF,EAAKG,SAC/E,mBAAGhB,UAAU,2BAAb,SAAyCa,EAAKI,cAC9C,oBAAGjB,UAAU,2BAAb,oBAAgDa,EAAKF,wBAJnDE,EAAKK,a,MEvBhBC,MARf,WACE,OACE,qBAAKnB,UAAU,MAAf,SACC,cAACoB,EAAD,O,OCKeC,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCfN,IAIeC,EAJKC,0BAAgB,CAChCnC,MHAW,WAAqD,IAA/BE,EAA8B,uDAF9C,KAEsCkC,EAAQ,uCACjE,OAAQA,EAAO9B,MACb,IAAK,oBACH,OAAO8B,EAAO7B,QAEhB,QACE,OAAOL,M,gBICPmC,EAAQC,sBAAYJ,EAAaK,8BACnCC,0BAAgBC,OAEpBC,IAASC,OACL,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,IAAMO,WAAP,UACI,cAAC,EAAD,QAGR9B,SAAS+B,eAAe,SF+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7D,c","file":"static/js/main.144991f7.chunk.js","sourcesContent":["export async function client(endpoint, { body, ...customConfig } = {}) {\r\n    const headers = { 'Content-Type': 'application/json' }\r\n  \r\n    const config = {\r\n      method: 'GET',\r\n      ...customConfig,\r\n      headers: {\r\n        ...headers,\r\n        ...customConfig.headers,\r\n      },\r\n    }\r\n  \r\n    if (body) {\r\n      config.body = JSON.stringify(body)\r\n    }\r\n  \r\n    let data\r\n    try {\r\n      const response = await window.fetch(endpoint, config)\r\n      data = await response.json()\r\n      if (response.ok) {\r\n        return data\r\n      }\r\n      throw new Error(response.statusText)\r\n    } catch (err) {\r\n      return Promise.reject(err.message ? err.message : data)\r\n    }\r\n  }\r\n  \r\n  client.get = function (endpoint, customConfig = {}) {\r\n    return client(endpoint, { ...customConfig, method: 'GET' })\r\n  }\r\n  ","export const API  = 'https://api.github.com/users';\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchNewRepos } from '../actions/reposActions';\r\nimport { API } from './API';\r\n\r\nconst Pages = () => {\r\n    const dispatch = useDispatch();\r\n    const [user, setUser] = useState(null);\r\n    const repos = useSelector(state => state.repos);\r\n    const url = `${API}/${user}/repos`;\r\n\r\n    const handleGetRepos = () => {\r\n        let inputValue = document.querySelector('.input').value;\r\n        setUser(inputValue);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(user!==null){\r\n            dispatch(fetchNewRepos(url));\r\n        }       \r\n    },[user]);\r\n\r\n    return ( \r\n        <div className=\"flex flex-col flex-wrap content-center\">\r\n            <h1 className=\"text-6xl bold m-7 text-gray-700 text-center\">Find users repositories on GitHub</h1>\r\n            <form className=\"m-7 self-center\" onsubmit=\"return false;\">\r\n                <input className=\"input m-2 w-80 shadow appearance-none border rounded py-2 px-3 text-grey-darker\" type=\"text\" placeholder=\"Type user name and click search\"/>\r\n                <button className=\"italic font-bold border border-yellow-500 text-yellow-500 rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:text-white hover:bg-yellow-500 focus:outline-none focus:shadow-outline\" onClick={handleGetRepos} type=\"button\">Search</button>\r\n            </form>\r\n            <div className=\"flex flex-row flex-wrap\">\r\n                {repos&&repos\r\n                .sort(function(first, second) {\r\n                    return second.stargazers_count - first.stargazers_count;\r\n                })\r\n                .map(repo=>\r\n                <div key={repo.id} className=\"flex flex-col self-center p-8 m-8 shadow-2xl\">\r\n                    <a href={repo.html_url}>\r\n                        <h2 className=\"text-xl bold p-5 text-yellow-500\"><a href={repo.html_url}>{repo.name}</a></h2>\r\n                        <p className=\"text-l p-5 text-gray-700\">{repo.description}</p>\r\n                        <p className=\"text-s p-5 text-gray-500\">Stars: {repo.stargazers_count}</p>\r\n                    </a>\r\n                </div>)}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Pages;","import { client } from './client';\r\n\r\nconst initialState = null;\r\n\r\nexport default function reposReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'repos/reposLoaded': {\r\n      return action.payload\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport function fetchNewRepos(url) {\r\n  return async function fetchRepos (dispatch, getState) {\r\n  const response = await client.get(url)\r\n  dispatch({ type: 'repos/reposLoaded', payload: response })\r\n} \r\n}\r\n","import Page from './components/Page';\nimport './style.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Page/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import reposReducer from '../actions/reposActions'\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    repos: reposReducer\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport allReducers from './reducers';\nimport thunk from \"redux-thunk\";\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(allReducers, composeWithDevTools(\n    applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}